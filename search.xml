<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>快读快写板子</title>
    <url>/2022/06/05/%E5%BF%AB%E8%AF%BB%E5%BF%AB%E5%86%99%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="update5"><a href="#update5" class="headerlink" title="update5"></a>update5</h3><p>现在可以用小数辣！支持<code>float</code>和<code>double</code>(当然<code>long double</code>勉强能用，出锅了别来找我qwq).</p>
<p>保留小数的话可以用<code>setpcs()</code>函数，例如<code>setpcs(5)</code>就是按四舍五入保留 $ 5 $ 位小数.</p>
<p>可以用 <code>cout &lt;&lt; setpcs(5) &lt;&lt; ans;</code> 或者 <code>print(setpcs(5), ans);</code> 两种方法.</p>
<p>也可以在程序最开头写上<code>setpcs(5)</code>,这样所有小数输出都会保留 $ 5 $ 位小数了.</p>
<h3 id="update4"><a href="#update4" class="headerlink" title="update4"></a>update4</h3><p>可以用 <code>read&lt;int&gt;()</code> 获得一个 <code>int</code> 型数据，或者 <code>read&lt;long long&gt;()</code> 获得一个 <code>long long</code> 型数据,<br>即 <code>a = read&lt;int&gt;()</code> ，但是只能读整数，不要传入字符串或浮点数.</p>
<h3 id="update3"><a href="#update3" class="headerlink" title="update3"></a>update3</h3><p>已通过 <code>#ifdef</code> 方式实现在OJ上用 <code>fread</code> ,在本地上用 <code>cstdio</code> 库输入输出，本地debug不需要文件读写了.</p>
<h3 id="update2"><a href="#update2" class="headerlink" title="update2"></a>update2</h3><p>可以用 <code>io&gt;&gt;a&gt;&gt;b</code> , <code>io&lt;&lt;a&lt;&lt;b</code>, <code>io&gt;&gt;a&lt;&lt;a</code> ，还写上了 <code>#define cin io</code> , <code>#define cout io</code> , <code>#define endl &#39;\n&#39;</code> ，使用 <code>cin</code> 的话可以直接把板子贴上去无需修改.</p>
<h3 id="update1"><a href="#update1" class="headerlink" title="update1"></a>update1</h3><p>已修复无法<code>while(read(a))</code>的bug.</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> fast_IO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> FAST_IO</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> IOSIZE 100000</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> db double</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ldb long double</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> i128 __int128_t</span></span><br><span class="line">    <span class="type">char</span> ibuf[IOSIZE], obuf[IOSIZE];</span><br><span class="line">    <span class="type">char</span> *p1 = ibuf, *p2 = ibuf, *p3 = obuf;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> getchar() ((p1==p2)and(p2=(p1=ibuf)+fread(ibuf,1,IOSIZE,stdin),p1==p2)?(EOF):(*p1++))</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> putchar(x) ((p3==obuf+IOSIZE)&amp;&amp;(fwrite(obuf,p3-obuf,1,stdout),p3=obuf),*p3++=x)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span><span class="comment">//fread in OJ, stdio in local</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> isdigit(ch) (ch&gt;47&amp;&amp;ch&lt;58)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> isspace(ch) (ch&lt;33&amp;&amp;ch!=EOF)</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T s = <span class="number">0</span>; <span class="type">int</span> w = <span class="number">1</span>; <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(ch=<span class="built_in">getchar</span>(), !<span class="built_in">isdigit</span>(ch)&amp;&amp;(ch!=EOF))</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) w = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch == EOF) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">            s = s*<span class="number">10</span>+ch<span class="number">-48</span>, ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            ll flt = <span class="number">0</span>; <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(ch=<span class="built_in">getchar</span>(), <span class="built_in">isdigit</span>(ch))</span><br><span class="line">                <span class="keyword">if</span>(cnt &lt; <span class="number">18</span>) flt=flt*<span class="number">10</span>+ch<span class="number">-48</span>, cnt++;</span><br><span class="line">            s += (db)flt/<span class="built_in">pow</span>(<span class="number">10</span>,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s *= w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">read</span><span class="params">(T &amp;s)</span> </span>&#123;</span><br><span class="line">        s = <span class="number">0</span>; <span class="type">int</span> w = <span class="number">1</span>; <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(ch=<span class="built_in">getchar</span>(), !<span class="built_in">isdigit</span>(ch)&amp;&amp;(ch!=EOF))</span><br><span class="line">            <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) w = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">            s = s*<span class="number">10</span>+ch<span class="number">-48</span>, ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            ll flt = <span class="number">0</span>; <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(ch=<span class="built_in">getchar</span>(), <span class="built_in">isdigit</span>(ch))</span><br><span class="line">                <span class="keyword">if</span>(cnt &lt; <span class="number">18</span>) flt=flt*<span class="number">10</span>+ch<span class="number">-48</span>, cnt++;</span><br><span class="line">            s += (db)flt/<span class="built_in">pow</span>(<span class="number">10</span>,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s *= w, <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">read</span><span class="params">(<span class="type">char</span> &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(s = <span class="built_in">getchar</span>(), <span class="built_in">isspace</span>(s));</span><br><span class="line">        <span class="keyword">return</span> s != EOF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">read</span><span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(ch=<span class="built_in">getchar</span>(), <span class="built_in">isspace</span>(ch));</span><br><span class="line">        <span class="keyword">if</span>(ch == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">isspace</span>(ch))</span><br><span class="line">            *s++ = ch, ch=<span class="built_in">getchar</span>();</span><br><span class="line">        *s = <span class="string">&#x27;\000&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">print</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> t[<span class="number">20</span>]; <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        <span class="keyword">do</span> &#123; t[++top] = x%<span class="number">10</span>; x /= <span class="number">10</span>; &#125; <span class="keyword">while</span>(x);</span><br><span class="line">        <span class="keyword">while</span>(top) <span class="built_in">putchar</span>(t[top--]+<span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">null_type</span>&#123;&#125;; <span class="type">int</span> pcs;</span><br><span class="line">    <span class="function">null_type <span class="title">setpcs</span><span class="params">(<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pcs = cnt;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">null_type</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(null_type x)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        x += <span class="number">5.0</span> / <span class="built_in">pow</span>(<span class="number">10</span>,pcs+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">print</span>((ll)(x)); x -= (ll)(x); <span class="built_in">putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= pcs; i++)</span><br><span class="line">            x *= <span class="number">10</span>, <span class="built_in">putchar</span>((<span class="type">int</span>)x+<span class="string">&#x27;0&#x27;</span>), x -= (<span class="type">int</span>)x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">float</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        x += <span class="number">5.0</span> / <span class="built_in">pow</span>(<span class="number">10</span>,pcs+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">print</span>((ll)(x)); x -= (ll)(x); <span class="built_in">putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= pcs; i++)</span><br><span class="line">            x *= <span class="number">10</span>, <span class="built_in">putchar</span>((<span class="type">int</span>)x+<span class="string">&#x27;0&#x27;</span>), x -= (<span class="type">int</span>)x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">long</span> <span class="type">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">        x += <span class="number">5.0</span> / <span class="built_in">pow</span>(<span class="number">10</span>,pcs+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">print</span>((i128)(x)); x -= (i128)(x); <span class="built_in">putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= pcs; i++)</span><br><span class="line">            x *= <span class="number">10</span>, <span class="built_in">putchar</span>((<span class="type">int</span>)x+<span class="string">&#x27;0&#x27;</span>), x -= (<span class="type">int</span>)x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">char</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">putchar</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">char</span> *x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; x[i]; i++)</span><br><span class="line">            <span class="built_in">putchar</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; x[i]; i++)</span><br><span class="line">            <span class="built_in">putchar</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> _GLIBCXX_STRING<span class="comment">//string</span></span></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">read</span><span class="params">(std::string&amp; s)</span> </span>&#123;</span><br><span class="line">            s = <span class="string">&quot;&quot;</span>; <span class="type">char</span> ch;</span><br><span class="line">            <span class="keyword">while</span>(ch=<span class="built_in">getchar</span>(), <span class="built_in">isspace</span>(ch));</span><br><span class="line">            <span class="keyword">if</span>(ch == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">isspace</span>(ch))</span><br><span class="line">                s += ch, ch = <span class="built_in">getchar</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(std::string x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i = x.<span class="built_in">begin</span>(); i != x.<span class="built_in">end</span>(); i++)</span><br><span class="line">                <span class="built_in">putchar</span>(*i);</span><br><span class="line">        &#125; </span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... T1&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">(T&amp; a, T1&amp;... other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">read</span>(a)+<span class="built_in">read</span>(other...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... T1&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">(T a, T1... other)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(a); <span class="built_in">print</span>(other...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">fast_IO_t</span>&#123;</span><br><span class="line">        <span class="built_in">fast_IO_t</span>() &#123;</span><br><span class="line">            <span class="built_in">setpcs</span>(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">fast_IO_t</span>()&#123;</span><br><span class="line">            <span class="built_in">fwrite</span>(obuf, p3-obuf, <span class="number">1</span>, stdout);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;io;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    fast_IO_t&amp; <span class="keyword">operator</span> &gt;&gt; (fast_IO_t &amp;io, T &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> io.flag=<span class="built_in">read</span>(b), io;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    fast_IO_t&amp; <span class="keyword">operator</span> &lt;&lt; (fast_IO_t &amp;io, T b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(b), io;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> cout io</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> cin io</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fast_IO;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
  </entry>
  <entry>
    <title>矩阵运算板子</title>
    <url>/2022/06/05/%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>声明一个矩阵: <code>matrix a;</code></p>
<p>支持 <code>+</code> , <code>-</code> , <code>*</code> , <code>%</code> , 下标访问和快速幂.</p>
<p><strong>注意</strong>：为了方便debug，在不满足运算法则进行运算时会直接退出程序并输出 <code>Matrix error!</code></p>
<p>默认矩阵大小为 <code>Xsize</code> , <code>Ysize</code> ，可自行修改<br>我也写了构造函数，可以用 <code>matrix a(10,10)</code> 来手动规定矩形的长和宽.</p>
<p>默认情况下矩阵内全为0，可以通过下标访问修改矩阵内元素的值.</p>
<p>默认情况下矩阵内元素类型为 <code>int</code> ，可以修改 <code>#define type int</code> 来修改元素类型.</p>
<p>默认情况下矩阵自动对 <code>INT_MAX</code> 取模，你也可以修改这个自动模数，在 <code>const type mod = INT_MAX</code> 处可以修改.</p>
<p>为了debug方便你可以直接 <code>print(matrix)</code> 来输出一个矩阵.</p>
<p>我内部是用一个 <code>vector&lt;vector&lt;type&gt;&gt;</code> 实现的矩阵(二维数组太不灵活了)，常数有点大请见谅，但是我找不到更好的写法来实现矩阵了，如果有速度更快的办法可以私信我，我尽量更新( .</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Matrix</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> type int</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> Xsize = <span class="number">80</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> Ysize = <span class="number">80</span>;</span><br><span class="line">    <span class="type">const</span> type mod = INT_MAX;    </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">matrix</span></span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;vector&lt;type&gt;&gt; a;</span><br><span class="line">        <span class="type">int</span> xlen, ylen;</span><br><span class="line">        <span class="built_in">matrix</span>(<span class="type">int</span> x=Xsize, <span class="type">int</span> y=Ysize)</span><br><span class="line">        &#123;</span><br><span class="line">            xlen = x, ylen = y;</span><br><span class="line">            a.<span class="built_in">resize</span>(x+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i].<span class="built_in">resize</span>(y+<span class="number">1</span>);</span><br><span class="line">                a[i].<span class="built_in">assign</span>(y+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;type&gt;&amp; <span class="keyword">operator</span> [] (<span class="type">int</span> x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">throw_error</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Matrix error!&quot;</span>;</span><br><span class="line">        std::<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> + (matrix a, matrix b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.xlen != b.xlen <span class="keyword">or</span> a.ylen != b.ylen)</span><br><span class="line">            <span class="built_in">throw_error</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.xlen; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a.ylen; j++)</span><br><span class="line">            (a[i][j] += b[i][j]) %= mod;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> - (matrix a, matrix b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.xlen != b.xlen <span class="keyword">or</span> a.ylen != b.ylen)</span><br><span class="line">            <span class="built_in">throw_error</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.xlen; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a.ylen; j++)</span><br><span class="line">            (a[i][j] -= b[i][j]) %= mod;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> * (matrix a, matrix b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.ylen != b.xlen) <span class="built_in">throw_error</span>();</span><br><span class="line">        <span class="function">matrix <span class="title">ans</span><span class="params">(a.xlen, b.ylen)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.xlen; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b.ylen; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= a.ylen; k++)</span><br><span class="line">            (ans[i][j] += a[i][k]*b[k][j]) %= mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> * (matrix a, type k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.xlen; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a.ylen; j++)</span><br><span class="line">            (a[i][j] *= k) %= mod;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span> % (matrix a, type k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.xlen; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a.ylen; j++)</span><br><span class="line">            a[i][j] %= k;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix&amp; <span class="keyword">operator</span> += (matrix &amp;a, matrix b)&#123; <span class="built_in">return</span> (a = a+b); &#125;</span><br><span class="line">    matrix&amp; <span class="keyword">operator</span> -= (matrix &amp;a, matrix b)&#123; <span class="built_in">return</span> (a = a-b); &#125;</span><br><span class="line">    matrix&amp; <span class="keyword">operator</span> *= (matrix &amp;a, matrix b)&#123; <span class="built_in">return</span> (a = a*b); &#125;</span><br><span class="line">    matrix&amp; <span class="keyword">operator</span> *= (matrix &amp;a, type k)&#123; <span class="built_in">return</span> (a = a*k); &#125;</span><br><span class="line">    matrix&amp; <span class="keyword">operator</span> %= (matrix &amp;a, type k)&#123; <span class="built_in">return</span> (a = a%k); &#125;</span><br><span class="line">    <span class="function">matrix <span class="title">pow</span><span class="params">(matrix a, <span class="type">long</span> <span class="type">long</span> p, type k=mod)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.xlen != a.ylen) <span class="built_in">throw_error</span>();</span><br><span class="line">        <span class="function">matrix <span class="title">ans</span><span class="params">(a.xlen, a.ylen)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.xlen; i++)</span><br><span class="line">            ans[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(; p; p &gt;&gt;= <span class="number">1</span>, (a *= a) %= k)</span><br><span class="line">            <span class="keyword">if</span>(p&amp;<span class="number">1</span>) (ans *= a) %= k;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(matrix a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.xlen; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a.ylen; j++)</span><br><span class="line">                cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Matrix;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
  </entry>
  <entry>
    <title>网络流</title>
    <url>/2022/05/27/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<p>一些技术原因（其实还是懒），我没搞下来我的课件markdown源码，先看<a href="https://misaka-mikoto233.github.io/2022/02/07/%E7%BD%91%E7%BB%9C%E6%B5%81/?t=1653647760023">这个</a>代替吧.</p>
]]></content>
      <categories>
        <category>课件</category>
      </categories>
  </entry>
  <entry>
    <title>高精板子</title>
    <url>/2022/06/05/%E9%AB%98%E7%B2%BE%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>支持除位运算符外所有运算符，请通过修改<code>bigint_SIZE</code>来修改高精数长度</p>
<p>tips: 除法有一点慢</p>
<p>输入输出可以用成员函数<code>(bigint).input()</code>和<code>(bigint).print()</code>，也可以用<code>read(bigint&amp;)</code>和<code>print(bigint)</code></p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> bigint_space&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> bigint_SIZE = <span class="number">505</span>;</span><br><span class="line">    <span class="type">char</span> bigint_input[bigint_SIZE];</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">division_compare</span><span class="params">(<span class="type">short</span> *a, <span class="type">int</span> lena, <span class="type">short</span> *b, <span class="type">int</span> lenb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lena != lenb)</span><br><span class="line">            <span class="keyword">return</span> lena &gt; lenb;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] != b[i])</span><br><span class="line">                <span class="keyword">return</span> a[i] &gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">division_minus</span><span class="params">(<span class="type">short</span> *a, <span class="type">int</span> lena, <span class="type">short</span> *b, <span class="type">int</span> lenb)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> f = lena != lenb;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = lena; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i] -= b[i-f];</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; <span class="number">0</span>)</span><br><span class="line">                a[i] += <span class="number">10</span>, a[i<span class="number">-1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">bigint</span>&#123;</span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">short</span> s[bigint_SIZE];</span><br><span class="line">            <span class="type">bool</span> less0;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="built_in">bigint</span>(<span class="type">long</span> <span class="type">long</span> x = <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                std::<span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">                len = <span class="number">0</span>; less0 = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    len = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">                    less0 = <span class="literal">true</span>, x = -x;</span><br><span class="line">                <span class="keyword">while</span>(x != <span class="number">0</span>)</span><br><span class="line">                    s[++len] = x%<span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123; std::<span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s)); len=<span class="number">1</span>; &#125;</span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                std::<span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">                std::<span class="built_in">memset</span>(bigint_input, <span class="number">0</span>, <span class="built_in">sizeof</span>(bigint_input));</span><br><span class="line">                len = <span class="number">0</span>;</span><br><span class="line">                <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">                <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                        less0 = <span class="literal">true</span>;</span><br><span class="line">                    ch = <span class="built_in">getchar</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    bigint_input[++len] = ch;</span><br><span class="line">                    ch = <span class="built_in">getchar</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">                    s[i] = bigint_input[len-i+<span class="number">1</span>]<span class="number">-48</span>;</span><br><span class="line">                <span class="meta">#<span class="keyword">ifdef</span> getchar</span></span><br><span class="line">                    ibufp1--;</span><br><span class="line">                <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(less0) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                    <span class="built_in">putchar</span>(s[i]+<span class="number">48</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> + (bigint a, bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                bigint c;</span><br><span class="line">                c.len = a.len &gt; b.len ? a.len : b.len;</span><br><span class="line">                <span class="keyword">if</span>(a.less0 &amp;&amp; b.less0)</span><br><span class="line">                    <span class="keyword">return</span> -(-a + -b);</span><br><span class="line">                <span class="keyword">if</span>(a.less0)</span><br><span class="line">                    <span class="keyword">return</span> b-<span class="built_in">abs</span>(a);</span><br><span class="line">                <span class="keyword">if</span>(b.less0)</span><br><span class="line">                    <span class="keyword">return</span> a-<span class="built_in">abs</span>(b);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c.len+<span class="number">1</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    c.s[i] += a.s[i]+b.s[i];</span><br><span class="line">                    c.s[i+<span class="number">1</span>] += c.s[i]/<span class="number">10</span>;</span><br><span class="line">                    c.s[i] %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(c.s[c.len+<span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">                c.len++;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> - (bigint a)</span><br><span class="line">            &#123;</span><br><span class="line">                a.less0 = !a.less0;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> - (bigint a, bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(b.less0)</span><br><span class="line">                    <span class="keyword">return</span> a+<span class="built_in">abs</span>(b);</span><br><span class="line">                <span class="keyword">if</span>(a.less0)</span><br><span class="line">                    <span class="keyword">return</span> -(<span class="built_in">abs</span>(a)+b);</span><br><span class="line">                <span class="keyword">if</span>(a &lt; b)</span><br><span class="line">                    <span class="keyword">return</span> -(b-a);</span><br><span class="line">                bigint c;</span><br><span class="line">                c.len = a.len &gt; b.len ? a.len : b.len;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c.len; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    c.s[i] = a.s[i]-b.s[i];</span><br><span class="line">                    <span class="keyword">if</span>(c.s[i] &lt; <span class="number">0</span>)</span><br><span class="line">                        a.s[i+<span class="number">1</span>]--, c.s[i] += <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(c.s[c.len] == <span class="number">0</span> <span class="keyword">and</span> c.len &gt; <span class="number">1</span>)</span><br><span class="line">                    c.len--;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> * (bigint a, bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                bigint c;</span><br><span class="line">                c.less0 = a.less0 ^ b.less0;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b.len; i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a.len; j++)</span><br><span class="line">                        c.s[i+j<span class="number">-1</span>] += a.s[j]*b.s[i];</span><br><span class="line">                c.len = a.len+b.len;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= c.len; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    c.s[i+<span class="number">1</span>] += c.s[i]/<span class="number">10</span>;</span><br><span class="line">                    c.s[i] %= <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(c.s[c.len] == <span class="number">0</span> <span class="keyword">and</span> c.len &gt; <span class="number">1</span>)</span><br><span class="line">                    c.len--;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> / (bigint a, <span class="type">long</span> <span class="type">long</span> b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a) &lt; <span class="built_in">abs</span>(b))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                bigint c;</span><br><span class="line">                c.len = a.len;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> tot = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = a.len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    tot *= <span class="number">10</span>;</span><br><span class="line">                    tot += a.s[i];</span><br><span class="line">                    <span class="keyword">if</span>(tot &gt;= b)</span><br><span class="line">                    &#123;</span><br><span class="line">                        c.s[i] = tot/b;</span><br><span class="line">                        tot %= b;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(c.s[c.len] == <span class="number">0</span> <span class="keyword">and</span> c.len &gt; <span class="number">1</span>)</span><br><span class="line">                    c.len--;</span><br><span class="line">                c.less0 = a.less0 ^ (b&lt;<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> / (bigint a,bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a) &lt; <span class="built_in">abs</span>(b))</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                bigint c;</span><br><span class="line">                c.len = a.len-b.len+<span class="number">1</span>;</span><br><span class="line">                c.less0 = a.less0 ^ b.less0;</span><br><span class="line">                <span class="type">short</span> abuf[bigint_SIZE]; <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">                <span class="type">short</span> bbuf[bigint_SIZE];</span><br><span class="line">                <span class="built_in">memset</span>(abuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(abuf));</span><br><span class="line">                <span class="built_in">memset</span>(bbuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(bbuf));</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = b.len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                    bbuf[i] = b.s[b.len-i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = a.len; i &gt;= <span class="number">1</span>;)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span>(!<span class="built_in">division_compare</span>(abuf, top, bbuf, b.len) <span class="keyword">and</span> i &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!(top == <span class="number">0</span> <span class="keyword">and</span> a.s[i] == <span class="number">0</span>))</span><br><span class="line">                            abuf[++top] = a.s[i];</span><br><span class="line">                        i--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="built_in">division_compare</span>(abuf, top, bbuf, b.len))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">division_minus</span>(abuf, top, bbuf, b.len);</span><br><span class="line">                        c.s[i+<span class="number">1</span>]++;</span><br><span class="line">                        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= top; j++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(abuf[j] != <span class="number">0</span>)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            tot++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(tot != <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= top-tot; j++)</span><br><span class="line">                                abuf[j] = abuf[j+tot], abuf[j+tot] = <span class="number">0</span>;</span><br><span class="line">                            top -= tot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(c.s[c.len] == <span class="number">0</span> <span class="keyword">and</span> c.len &gt; <span class="number">1</span>)</span><br><span class="line">                    c.len--;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> % (bigint a, bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                bigint c;</span><br><span class="line">                c.less0 = <span class="number">0</span>;</span><br><span class="line">                <span class="type">short</span> abuf[bigint_SIZE]; <span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line">                <span class="type">short</span> bbuf[bigint_SIZE];</span><br><span class="line">                <span class="built_in">memset</span>(abuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(abuf));</span><br><span class="line">                <span class="built_in">memset</span>(bbuf, <span class="number">0</span>, <span class="built_in">sizeof</span>(bbuf));</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = b.len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                    bbuf[i] = b.s[b.len-i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = a.len; i &gt;= <span class="number">1</span>;)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span>(!<span class="built_in">division_compare</span>(abuf, top, bbuf, b.len) <span class="keyword">and</span> i &gt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!(top == <span class="number">0</span> <span class="keyword">and</span> a.s[i] == <span class="number">0</span>))</span><br><span class="line">                            abuf[++top] = a.s[i];</span><br><span class="line">                        i--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="built_in">division_compare</span>(abuf, top, bbuf, b.len))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">division_minus</span>(abuf, top, bbuf, b.len);</span><br><span class="line">                        <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= top; j++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span>(abuf[j] != <span class="number">0</span>)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            tot++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(tot != <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= top-tot; j++)</span><br><span class="line">                                abuf[j] = abuf[j+tot], abuf[j+tot] = <span class="number">0</span>;</span><br><span class="line">                            top -= tot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                c.len = (top==<span class="number">0</span>)?<span class="number">1</span>:top;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = top; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                    c.s[top-i+<span class="number">1</span>] = abuf[i];</span><br><span class="line">                <span class="keyword">while</span>(c.s[c.len] == <span class="number">0</span> <span class="keyword">and</span> c.len &gt; <span class="number">1</span>)</span><br><span class="line">                    c.len--;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> ++ (bigint &amp;a) &#123; <span class="keyword">return</span> (a = a+<span class="number">1</span>); &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> ++ (<span class="type">int</span>)&#123;</span><br><span class="line">                bigint a = *<span class="keyword">this</span>;</span><br><span class="line">                *<span class="keyword">this</span> = (*<span class="keyword">this</span>)+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> bigint <span class="keyword">operator</span> -- (bigint &amp;a) &#123; <span class="keyword">return</span> (a = a<span class="number">-1</span>); &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> -- (<span class="type">int</span>)&#123;</span><br><span class="line">                bigint a = *<span class="keyword">this</span>;</span><br><span class="line">                *<span class="keyword">this</span> = *<span class="keyword">this</span> - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> = (<span class="type">long</span> <span class="type">long</span> x)&#123;</span><br><span class="line">                std::<span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(s));</span><br><span class="line">                len = <span class="number">0</span>; less0 = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    len = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">                    less0 = <span class="literal">true</span>, x = -x;</span><br><span class="line">                <span class="keyword">while</span>(x != <span class="number">0</span>)</span><br><span class="line">                    s[++len] = x%<span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &gt; (bigint a, bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a.less0 != b.less0)</span><br><span class="line">                    <span class="keyword">return</span> a.less0 &lt; b.less0;</span><br><span class="line">                <span class="type">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(a.len != b.len)</span><br><span class="line">                    ans = a.len &gt; b.len;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i = a.len; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                        <span class="keyword">if</span>(a.s[i] != b.s[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            ans = a.s[i] &gt; b.s[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> (a.less0 <span class="keyword">and</span> b.less0) ? !ans : ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (bigint a, bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a.less0 != b.less0)</span><br><span class="line">                    <span class="keyword">return</span> a.less0 &gt; b.less0;</span><br><span class="line">                <span class="type">bool</span> ans = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(a.len != b.len)</span><br><span class="line">                    ans = a.len &lt; b.len;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i = a.len ; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">                        <span class="keyword">if</span>(a.s[i] != b.s[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                            ans = a.s[i] &lt; b.s[i];</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> (a.less0 <span class="keyword">and</span> b.less0) ? !ans : ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> == (bigint a, bigint b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a.less0 != b.less0)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(a.len != b.len)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a.len; i++)</span><br><span class="line">                    <span class="keyword">if</span>(a.s[i] != b.s[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &gt;= (bigint a, bigint b) &#123; <span class="keyword">return</span> !(a&lt;b); &#125;</span><br><span class="line">            <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;= (bigint a, bigint b) &#123; <span class="keyword">return</span> !(a&gt;b); &#125;</span><br><span class="line">            <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> != (bigint a, bigint b) &#123; <span class="keyword">return</span> !(a==b); &#125;</span><br><span class="line">            <span class="function"><span class="keyword">friend</span> bigint <span class="title">max</span><span class="params">(bigint a, bigint b)</span></span>&#123; <span class="keyword">return</span> a&gt;b?a:b; &#125;</span><br><span class="line">            <span class="function"><span class="keyword">friend</span> bigint <span class="title">min</span><span class="params">(bigint a, bigint b)</span></span>&#123; <span class="keyword">return</span> a&lt;b?a:b; &#125;</span><br><span class="line">            <span class="function"><span class="keyword">friend</span> bigint <span class="title">abs</span><span class="params">(bigint a)</span></span>&#123; a.less0 = <span class="literal">false</span>; <span class="keyword">return</span> a; &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> += (bigint a)&#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span>+a; &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> -= (bigint a)&#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span>-a; &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> *= (bigint a)&#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span>*a; &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> /= (bigint a)&#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span>/a; &#125;</span><br><span class="line">            bigint <span class="keyword">operator</span> %= (bigint a)&#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span>%a; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(bigint &amp;a)</span></span>&#123; a.<span class="built_in">input</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(bigint a)</span> </span>&#123; a.<span class="built_in">print</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> bigint_space;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
  </entry>
</search>
